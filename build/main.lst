ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/main.c"
  18              		.section	.RamFunc,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	My_LED_On:
  25              	.LVL0:
  26              	.LFB40:
  27              		.file 2 "Inc/led.h"
   1:Inc/led.h     **** #pragma once
   2:Inc/led.h     **** 
   3:Inc/led.h     **** #include "main.h"
   4:Inc/led.h     **** #include "my_gpio.h"
   5:Inc/led.h     **** 
   6:Inc/led.h     **** #define LEDn 4
   7:Inc/led.h     **** 
   8:Inc/led.h     **** #define LED3_PIN                         GPIO_PIN_6
   9:Inc/led.h     **** #define LED3_GPIO_PORT                   GPIOC
  10:Inc/led.h     **** #define LED3_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  11:Inc/led.h     **** #define LED3_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  12:Inc/led.h     **** 
  13:Inc/led.h     **** #define LED4_PIN                         GPIO_PIN_8
  14:Inc/led.h     **** #define LED4_GPIO_PORT                   GPIOC
  15:Inc/led.h     **** #define LED4_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  16:Inc/led.h     **** #define LED4_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  17:Inc/led.h     ****   
  18:Inc/led.h     **** #define LED5_PIN                         GPIO_PIN_9
  19:Inc/led.h     **** #define LED5_GPIO_PORT                   GPIOC
  20:Inc/led.h     **** #define LED5_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  21:Inc/led.h     **** #define LED5_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE()  
  22:Inc/led.h     **** 
  23:Inc/led.h     **** #define LED6_PIN                         GPIO_PIN_7
  24:Inc/led.h     **** #define LED6_GPIO_PORT                   GPIOC
  25:Inc/led.h     **** #define LED6_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  26:Inc/led.h     **** #define LED6_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  27:Inc/led.h     **** 
  28:Inc/led.h     **** #define LEDx_GPIO_CLK_ENABLE(__LED__) do { if((__LED__) == LED3) LED3_GPIO_CLK_ENABLE(); else \
  29:Inc/led.h     ****                                            if((__LED__) == LED4) LED4_GPIO_CLK_ENABLE(); else \
  30:Inc/led.h     ****                                            if((__LED__) == LED5) LED5_GPIO_CLK_ENABLE(); else \
  31:Inc/led.h     ****                                            if((__LED__) == LED6) LED6_GPIO_CLK_ENABLE();} while(0)
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 2


  32:Inc/led.h     **** 
  33:Inc/led.h     **** #define LEDx_GPIO_CLK_DISABLE(__LED__)  (((__LED__) == LED3) ? LED3_GPIO_CLK_DISABLE() :\
  34:Inc/led.h     ****                                          ((__LED__) == LED4) ? LED4_GPIO_CLK_DISABLE() :\
  35:Inc/led.h     ****                                          ((__LED__) == LED5) ? LED5_GPIO_CLK_DISABLE() : \
  36:Inc/led.h     ****                                          ((__LED__) == LED6) ? LED6_GPIO_CLK_DISABLE() : 0 )
  37:Inc/led.h     **** typedef enum 
  38:Inc/led.h     **** {
  39:Inc/led.h     ****     LED3 = 0,
  40:Inc/led.h     ****     LED4 = 1,
  41:Inc/led.h     ****     LED5 = 2,
  42:Inc/led.h     ****     LED6 = 3,
  43:Inc/led.h     ****     /* Color led aliases */
  44:Inc/led.h     ****     LED_RED    = LED3,
  45:Inc/led.h     ****     LED_ORANGE = LED4,
  46:Inc/led.h     ****     LED_GREEN  = LED5,
  47:Inc/led.h     ****     LED_BLUE   = LED6
  48:Inc/led.h     **** } Led_TypeDef;
  49:Inc/led.h     **** 
  50:Inc/led.h     **** extern GPIO_TypeDef* My_LED_PORT[LEDn];
  51:Inc/led.h     **** extern const uint16_t My_LED_PIN[LEDn];
  52:Inc/led.h     **** 
  53:Inc/led.h     **** static inline void RAMFUNC My_LED_On(Led_TypeDef Led)
  54:Inc/led.h     **** {
  28              		.loc 2 54 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 2 54 1 is_stmt 0 view .LVU1
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  55:Inc/led.h     ****   My_GPIO_WritePin(My_LED_PORT[Led], My_LED_PIN[Led], GPIO_PIN_SET);
  38              		.loc 2 55 3 is_stmt 1 view .LVU2
  39              		.loc 2 55 48 is_stmt 0 view .LVU3
  40 0002 054B     		ldr	r3, .L2
  41 0004 4200     		lsls	r2, r0, #1
  42 0006 D15A     		ldrh	r1, [r2, r3]
  43              		.loc 2 55 3 view .LVU4
  44 0008 044B     		ldr	r3, .L2+4
  45 000a 8000     		lsls	r0, r0, #2
  46              	.LVL1:
  47              		.loc 2 55 3 view .LVU5
  48 000c C058     		ldr	r0, [r0, r3]
  49 000e 0122     		movs	r2, #1
  50 0010 FFF7FEFF 		bl	My_GPIO_WritePin
  51              	.LVL2:
  56:Inc/led.h     **** }
  52              		.loc 2 56 1 view .LVU6
  53              		@ sp needed
  54 0014 10BD     		pop	{r4, pc}
  55              	.L3:
  56 0016 C046     		.align	2
  57              	.L2:
  58 0018 00000000 		.word	My_LED_PIN
  59 001c 00000000 		.word	My_LED_PORT
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 3


  60              		.cfi_endproc
  61              	.LFE40:
  63              		.align	1
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  68              	My_LED_Off:
  69              	.LVL3:
  70              	.LFB41:
  57:Inc/led.h     **** 
  58:Inc/led.h     **** 
  59:Inc/led.h     **** static inline void RAMFUNC My_LED_Off(Led_TypeDef Led)
  60:Inc/led.h     **** {
  71              		.loc 2 60 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		.loc 2 60 1 is_stmt 0 view .LVU8
  76 0020 10B5     		push	{r4, lr}
  77              	.LCFI1:
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 4, -8
  80              		.cfi_offset 14, -4
  61:Inc/led.h     ****   My_GPIO_WritePin(My_LED_PORT[Led], My_LED_PIN[Led], GPIO_PIN_RESET);
  81              		.loc 2 61 3 is_stmt 1 view .LVU9
  82              		.loc 2 61 48 is_stmt 0 view .LVU10
  83 0022 054B     		ldr	r3, .L5
  84 0024 4200     		lsls	r2, r0, #1
  85 0026 D15A     		ldrh	r1, [r2, r3]
  86              		.loc 2 61 3 view .LVU11
  87 0028 044B     		ldr	r3, .L5+4
  88 002a 8000     		lsls	r0, r0, #2
  89              	.LVL4:
  90              		.loc 2 61 3 view .LVU12
  91 002c C058     		ldr	r0, [r0, r3]
  92 002e 0022     		movs	r2, #0
  93 0030 FFF7FEFF 		bl	My_GPIO_WritePin
  94              	.LVL5:
  62:Inc/led.h     **** }
  95              		.loc 2 62 1 view .LVU13
  96              		@ sp needed
  97 0034 10BD     		pop	{r4, pc}
  98              	.L6:
  99 0036 C046     		.align	2
 100              	.L5:
 101 0038 00000000 		.word	My_LED_PIN
 102 003c 00000000 		.word	My_LED_PORT
 103              		.cfi_endproc
 104              	.LFE41:
 106              		.global	__aeabi_uidiv
 107              		.section	.text.Setup_Timer2,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.code	16
 111              		.thumb_func
 113              	Setup_Timer2:
 114              	.LFB47:
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 4


   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "led.h"
  22:Src/main.c    **** #include "flash.h"
  23:Src/main.c    **** #include "timers.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE BEGIN PV */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PV */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  52:Src/main.c    **** void SystemClock_Config(void);
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE BEGIN PFP */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* USER CODE END PFP */
  57:Src/main.c    **** 
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 5


  58:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  59:Src/main.c    **** /* USER CODE BEGIN 0 */
  60:Src/main.c    **** 
  61:Src/main.c    **** 
  62:Src/main.c    **** static void Setup_Timer2(void);
  63:Src/main.c    **** 
  64:Src/main.c    **** /* USER CODE END 0 */
  65:Src/main.c    **** 
  66:Src/main.c    **** /**
  67:Src/main.c    ****   * @brief  The application entry point.
  68:Src/main.c    ****   * @retval int
  69:Src/main.c    ****   */
  70:Src/main.c    **** int main(void)
  71:Src/main.c    **** {
  72:Src/main.c    ****     /* STM32F0xx HAL library initialization:
  73:Src/main.c    ****          - Configure the Flash prefetch
  74:Src/main.c    ****          - Systick timer is configured by default as source of time base, but user
  75:Src/main.c    ****            can eventually implement his proper time base source (a general purpose
  76:Src/main.c    ****            timer for example or other time source), keeping in mind that Time base
  77:Src/main.c    ****            duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
  78:Src/main.c    ****            handled in milliseconds basis.
  79:Src/main.c    ****          - Low Level Initialization
  80:Src/main.c    ****        */
  81:Src/main.c    ****     HAL_Init();
  82:Src/main.c    **** 
  83:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  84:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  85:Src/main.c    **** 
  86:Src/main.c    ****     /* Initialize LED3, LED4 and LED5 */
  87:Src/main.c    ****     My_LED_Init(LED3);
  88:Src/main.c    ****     My_LED_Init(LED4);
  89:Src/main.c    ****     My_LED_Init(LED5);
  90:Src/main.c    ****     My_LED_Init(LED6);
  91:Src/main.c    **** 
  92:Src/main.c    ****     /* Configure the system clock to 48 MHz */
  93:Src/main.c    ****     SystemClock_Config();
  94:Src/main.c    ****     Setup_Timer2();
  95:Src/main.c    **** 
  96:Src/main.c    ****     My_LED_On(LED6);
  97:Src/main.c    **** 
  98:Src/main.c    ****     GPIO_InitTypeDef pa5_init =
  99:Src/main.c    ****     {
 100:Src/main.c    ****     	.Pin = GPIO_PIN_5,
 101:Src/main.c    **** 		.Mode = GPIO_MODE_AF_PP,
 102:Src/main.c    **** 		.Pull = GPIO_NOPULL,
 103:Src/main.c    **** 		.Speed = GPIO_SPEED_FREQ_HIGH,
 104:Src/main.c    **** 		.Alternate = GPIO_AF2_TIM2,
 105:Src/main.c    ****     };
 106:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &pa5_init);
 107:Src/main.c    **** 
 108:Src/main.c    ****     GPIO_InitTypeDef pa15_init =
 109:Src/main.c    ****     {
 110:Src/main.c    ****     	.Pin = GPIO_PIN_15,
 111:Src/main.c    **** 		.Mode = GPIO_MODE_OUTPUT_PP,
 112:Src/main.c    **** 		.Pull = GPIO_NOPULL,
 113:Src/main.c    **** 		.Speed = GPIO_SPEED_FREQ_HIGH,
 114:Src/main.c    ****     };
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 6


 115:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &pa15_init);
 116:Src/main.c    ****     My_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 117:Src/main.c    **** 
 118:Src/main.c    ****     GPIO_InitTypeDef pb15_init =
 119:Src/main.c    ****     {
 120:Src/main.c    ****     	.Pin = GPIO_PIN_15,
 121:Src/main.c    **** 		.Mode = GPIO_MODE_OUTPUT_PP,
 122:Src/main.c    **** 		.Pull = GPIO_NOPULL,
 123:Src/main.c    **** 		.Speed = GPIO_SPEED_FREQ_HIGH,
 124:Src/main.c    ****     };
 125:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &pb15_init);
 126:Src/main.c    ****     My_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 127:Src/main.c    **** 
 128:Src/main.c    ****     HAL_Delay(1000);
 129:Src/main.c    **** 
 130:Src/main.c    ****     TIM2->CCMR1 = (0b100 << TIM_CCMR1_OC1M_Pos);
 131:Src/main.c    **** 
 132:Src/main.c    ****     if (My_OK != DoErase())
 133:Src/main.c    ****     {
 134:Src/main.c    ****       while (1)
 135:Src/main.c    ****       {
 136:Src/main.c    ****         My_LED_Off(LED_RED);
 137:Src/main.c    ****         Delay(200);
 138:Src/main.c    ****         My_LED_On(LED_RED);
 139:Src/main.c    ****         Delay(200);
 140:Src/main.c    ****       }
 141:Src/main.c    ****     }
 142:Src/main.c    **** 
 143:Src/main.c    **** 	/* No error detected. */
 144:Src/main.c    **** 	My_LED_On(LED_RED);
 145:Src/main.c    **** 
 146:Src/main.c    **** 	/* Infinite loop */
 147:Src/main.c    ****     while (1)
 148:Src/main.c    ****     {
 149:Src/main.c    ****     }
 150:Src/main.c    **** }
 151:Src/main.c    **** 
 152:Src/main.c    **** /**
 153:Src/main.c    ****   * @brief System Clock Configuration
 154:Src/main.c    ****   * @retval None
 155:Src/main.c    ****   */
 156:Src/main.c    **** void SystemClock_Config(void)
 157:Src/main.c    **** {
 158:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 159:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 160:Src/main.c    **** 
 161:Src/main.c    ****     /* Select HSI48 Oscillator as PLL source */
 162:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 163:Src/main.c    ****     RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 164:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 165:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 166:Src/main.c    ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 167:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 168:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 169:Src/main.c    ****     {
 170:Src/main.c    ****         Error_Handler();
 171:Src/main.c    ****     }
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 7


 172:Src/main.c    **** 
 173:Src/main.c    ****     /* Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers */
 174:Src/main.c    ****     RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1)
 175:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 176:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 177:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 178:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 179:Src/main.c    ****     {
 180:Src/main.c    ****         Error_Handler();
 181:Src/main.c    ****     }
 182:Src/main.c    **** 
 183:Src/main.c    ****     DBGMCU->APB1FZ = DBGMCU_APB1_FZ_DBG_TIM2_STOP;
 184:Src/main.c    **** }
 185:Src/main.c    **** 
 186:Src/main.c    **** static void Setup_Timer2(void)
 187:Src/main.c    **** {
 115              		.loc 1 187 1 is_stmt 1 view -0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119 0000 10B5     		push	{r4, lr}
 120              	.LCFI2:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 4, -8
 123              		.cfi_offset 14, -4
 188:Src/main.c    **** 	NVIC_EnableIRQ(TIM2_IRQn);
 124              		.loc 1 188 2 view .LVU15
 125              	.LVL6:
 126              	.LBB8:
 127              	.LBI8:
 128              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 8


  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 9


  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 10


 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 11


 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 12


 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 13


 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 14


 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 15


 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 16


 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 17


 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 18


 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 129              		.loc 3 623 22 view .LVU16
 130              	.LBB9:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 131              		.loc 3 625 3 view .LVU17
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 132              		.loc 3 627 5 view .LVU18
 133              		.loc 3 627 20 is_stmt 0 view .LVU19
 134 0002 134A     		ldr	r2, .L8
 135 0004 8023     		movs	r3, #128
 136 0006 1B02     		lsls	r3, r3, #8
 137 0008 1360     		str	r3, [r2]
 138              	.LVL7:
 139              		.loc 3 627 20 view .LVU20
 140              	.LBE9:
 141              	.LBE8:
 189:Src/main.c    **** 	NVIC_SetPriority(TIM2_IRQn, 0);
 142              		.loc 1 189 2 is_stmt 1 view .LVU21
 143              	.LBB10:
 144              	.LBI10:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 19


 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 20


 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 145              		.loc 3 730 22 view .LVU22
 146              	.LBB11:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 147              		.loc 3 732 3 view .LVU23
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 148              		.loc 3 734 5 view .LVU24
 149              		.loc 3 734 52 is_stmt 0 view .LVU25
 150 000a C321     		movs	r1, #195
 151 000c 8900     		lsls	r1, r1, #2
 152 000e 5358     		ldr	r3, [r2, r1]
 153              		.loc 3 734 33 view .LVU26
 154 0010 1B02     		lsls	r3, r3, #8
 155 0012 1B0A     		lsrs	r3, r3, #8
 156              		.loc 3 734 30 view .LVU27
 157 0014 5350     		str	r3, [r2, r1]
 158              	.LVL8:
 159              		.loc 3 734 30 view .LVU28
 160              	.LBE11:
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 21


 161              	.LBE10:
 190:Src/main.c    **** 
 191:Src/main.c    **** 	/* (1) Enable the peripheral clock of Timer 2 */
 192:Src/main.c    **** 	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 162              		.loc 1 192 2 is_stmt 1 view .LVU29
 163              		.loc 1 192 5 is_stmt 0 view .LVU30
 164 0016 0F4A     		ldr	r2, .L8+4
 165 0018 D369     		ldr	r3, [r2, #28]
 166              		.loc 1 192 15 view .LVU31
 167 001a 0124     		movs	r4, #1
 168 001c 2343     		orrs	r3, r4
 169 001e D361     		str	r3, [r2, #28]
 193:Src/main.c    **** 	TIM2->ARR = HAL_RCC_GetSysClockFreq() / 100000;
 170              		.loc 1 193 2 is_stmt 1 view .LVU32
 171              		.loc 1 193 14 is_stmt 0 view .LVU33
 172 0020 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 173              	.LVL9:
 174              		.loc 1 193 40 view .LVU34
 175 0024 0C49     		ldr	r1, .L8+8
 176 0026 FFF7FEFF 		bl	__aeabi_uidiv
 177              	.LVL10:
 178              		.loc 1 193 12 view .LVU35
 179 002a 8023     		movs	r3, #128
 180 002c DB05     		lsls	r3, r3, #23
 181 002e D862     		str	r0, [r3, #44]
 194:Src/main.c    **** 	TIM2->DIER |= TIM_DIER_UIE;
 182              		.loc 1 194 2 is_stmt 1 view .LVU36
 183              		.loc 1 194 6 is_stmt 0 view .LVU37
 184 0030 DA68     		ldr	r2, [r3, #12]
 185              		.loc 1 194 13 view .LVU38
 186 0032 2243     		orrs	r2, r4
 187 0034 DA60     		str	r2, [r3, #12]
 195:Src/main.c    **** 	TIM2->EGR = 0;
 188              		.loc 1 195 2 is_stmt 1 view .LVU39
 189              		.loc 1 195 12 is_stmt 0 view .LVU40
 190 0036 0022     		movs	r2, #0
 191 0038 5A61     		str	r2, [r3, #20]
 196:Src/main.c    **** 
 197:Src/main.c    **** 	// Setup CH1 for Capture Output Mode
 198:Src/main.c    **** 	TIM2->CCR1 = UINT32_MAX;
 192              		.loc 1 198 2 is_stmt 1 view .LVU41
 193              		.loc 1 198 13 is_stmt 0 view .LVU42
 194 003a 013A     		subs	r2, r2, #1
 195 003c 5A63     		str	r2, [r3, #52]
 199:Src/main.c    **** 	TIM2->CCMR1 = (0b011 << TIM_CCMR1_OC1M_Pos);
 196              		.loc 1 199 2 is_stmt 1 view .LVU43
 197              		.loc 1 199 14 is_stmt 0 view .LVU44
 198 003e 3132     		adds	r2, r2, #49
 199 0040 9A61     		str	r2, [r3, #24]
 200:Src/main.c    **** 	TIM2->CCER = TIM_CCER_CC1E;
 200              		.loc 1 200 2 is_stmt 1 view .LVU45
 201              		.loc 1 200 13 is_stmt 0 view .LVU46
 202 0042 1C62     		str	r4, [r3, #32]
 201:Src/main.c    **** 
 202:Src/main.c    **** 	// Start TIM2
 203:Src/main.c    **** 	TIM2->CR1 |= TIM_CR1_URS | TIM_CR1_CEN;
 203              		.loc 1 203 2 is_stmt 1 view .LVU47
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 22


 204              		.loc 1 203 6 is_stmt 0 view .LVU48
 205 0044 1A68     		ldr	r2, [r3]
 206              		.loc 1 203 12 view .LVU49
 207 0046 0521     		movs	r1, #5
 208 0048 0A43     		orrs	r2, r1
 209 004a 1A60     		str	r2, [r3]
 204:Src/main.c    **** }
 210              		.loc 1 204 1 view .LVU50
 211              		@ sp needed
 212 004c 10BD     		pop	{r4, pc}
 213              	.L9:
 214 004e C046     		.align	2
 215              	.L8:
 216 0050 00E100E0 		.word	-536813312
 217 0054 00100240 		.word	1073876992
 218 0058 A0860100 		.word	100000
 219              		.cfi_endproc
 220              	.LFE47:
 222              		.section	.text.Error_Handler,"ax",%progbits
 223              		.align	1
 224              		.global	Error_Handler
 225              		.syntax unified
 226              		.code	16
 227              		.thumb_func
 229              	Error_Handler:
 230              	.LFB48:
 205:Src/main.c    **** 
 206:Src/main.c    **** /* USER CODE BEGIN 4 */
 207:Src/main.c    **** 
 208:Src/main.c    **** /* USER CODE END 4 */
 209:Src/main.c    **** 
 210:Src/main.c    **** /**
 211:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 212:Src/main.c    ****   * @retval None
 213:Src/main.c    ****   */
 214:Src/main.c    **** void Error_Handler(void)
 215:Src/main.c    **** {
 231              		.loc 1 215 1 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ Volatile: function does not return.
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 216:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 217:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 218:Src/main.c    ****   __disable_irq();
 237              		.loc 1 218 3 view .LVU52
 238              	.LBB12:
 239              	.LBI12:
 240              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 23


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 24


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 25


 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 241              		.loc 4 140 27 view .LVU53
 242              	.LBB13:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 243              		.loc 4 142 3 view .LVU54
 244              		.syntax divided
 245              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 246 0000 72B6     		cpsid i
 247              	@ 0 "" 2
 248              		.thumb
 249              		.syntax unified
 250              	.L11:
 251              	.LBE13:
 252              	.LBE12:
 219:Src/main.c    ****   while (1)
 253              		.loc 1 219 3 discriminator 1 view .LVU55
 220:Src/main.c    ****   {
 221:Src/main.c    ****   }
 254              		.loc 1 221 3 discriminator 1 view .LVU56
 219:Src/main.c    ****   while (1)
 255              		.loc 1 219 9 discriminator 1 view .LVU57
 256 0002 FEE7     		b	.L11
 257              		.cfi_endproc
 258              	.LFE48:
 260              		.section	.text.SystemClock_Config,"ax",%progbits
 261              		.align	1
 262              		.global	SystemClock_Config
 263              		.syntax unified
 264              		.code	16
 265              		.thumb_func
 267              	SystemClock_Config:
 268              	.LFB46:
 157:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct;
 269              		.loc 1 157 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 72
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 00B5     		push	{lr}
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 26


 274              	.LCFI3:
 275              		.cfi_def_cfa_offset 4
 276              		.cfi_offset 14, -4
 277 0002 93B0     		sub	sp, sp, #76
 278              	.LCFI4:
 279              		.cfi_def_cfa_offset 80
 158:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct;
 280              		.loc 1 158 5 view .LVU59
 159:Src/main.c    **** 
 281              		.loc 1 159 5 view .LVU60
 162:Src/main.c    ****     RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 282              		.loc 1 162 5 view .LVU61
 162:Src/main.c    ****     RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 283              		.loc 1 162 38 is_stmt 0 view .LVU62
 284 0004 2023     		movs	r3, #32
 285 0006 0193     		str	r3, [sp, #4]
 163:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 286              		.loc 1 163 5 is_stmt 1 view .LVU63
 163:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 287              		.loc 1 163 34 is_stmt 0 view .LVU64
 288 0008 1F3B     		subs	r3, r3, #31
 289 000a 0993     		str	r3, [sp, #36]
 164:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 290              		.loc 1 164 5 is_stmt 1 view .LVU65
 164:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 291              		.loc 1 164 36 is_stmt 0 view .LVU66
 292 000c 0222     		movs	r2, #2
 293 000e 0A92     		str	r2, [sp, #40]
 165:Src/main.c    ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 294              		.loc 1 165 5 is_stmt 1 view .LVU67
 165:Src/main.c    ****     RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 295              		.loc 1 165 37 is_stmt 0 view .LVU68
 296 0010 C022     		movs	r2, #192
 297 0012 5202     		lsls	r2, r2, #9
 298 0014 0B92     		str	r2, [sp, #44]
 166:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 299              		.loc 1 166 5 is_stmt 1 view .LVU69
 166:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 300              		.loc 1 166 34 is_stmt 0 view .LVU70
 301 0016 0D93     		str	r3, [sp, #52]
 167:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 302              		.loc 1 167 5 is_stmt 1 view .LVU71
 167:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 303              		.loc 1 167 34 is_stmt 0 view .LVU72
 304 0018 0023     		movs	r3, #0
 305 001a 0C93     		str	r3, [sp, #48]
 168:Src/main.c    ****     {
 306              		.loc 1 168 5 is_stmt 1 view .LVU73
 168:Src/main.c    ****     {
 307              		.loc 1 168 9 is_stmt 0 view .LVU74
 308 001c 01A8     		add	r0, sp, #4
 309 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 310              	.LVL11:
 168:Src/main.c    ****     {
 311              		.loc 1 168 8 view .LVU75
 312 0022 0028     		cmp	r0, #0
 313 0024 11D1     		bne	.L15
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 27


 174:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 314              		.loc 1 174 5 is_stmt 1 view .LVU76
 174:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 315              		.loc 1 174 33 is_stmt 0 view .LVU77
 316 0026 0723     		movs	r3, #7
 317 0028 0E93     		str	r3, [sp, #56]
 175:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 318              		.loc 1 175 5 is_stmt 1 view .LVU78
 175:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 319              		.loc 1 175 36 is_stmt 0 view .LVU79
 320 002a 053B     		subs	r3, r3, #5
 321 002c 0F93     		str	r3, [sp, #60]
 176:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 322              		.loc 1 176 5 is_stmt 1 view .LVU80
 176:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 323              		.loc 1 176 37 is_stmt 0 view .LVU81
 324 002e 0023     		movs	r3, #0
 325 0030 1093     		str	r3, [sp, #64]
 177:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 326              		.loc 1 177 5 is_stmt 1 view .LVU82
 177:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 327              		.loc 1 177 38 is_stmt 0 view .LVU83
 328 0032 1193     		str	r3, [sp, #68]
 178:Src/main.c    ****     {
 329              		.loc 1 178 5 is_stmt 1 view .LVU84
 178:Src/main.c    ****     {
 330              		.loc 1 178 9 is_stmt 0 view .LVU85
 331 0034 0121     		movs	r1, #1
 332 0036 0EA8     		add	r0, sp, #56
 333 0038 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 334              	.LVL12:
 178:Src/main.c    ****     {
 335              		.loc 1 178 8 view .LVU86
 336 003c 0028     		cmp	r0, #0
 337 003e 06D1     		bne	.L16
 183:Src/main.c    **** }
 338              		.loc 1 183 5 is_stmt 1 view .LVU87
 183:Src/main.c    **** }
 339              		.loc 1 183 20 is_stmt 0 view .LVU88
 340 0040 044B     		ldr	r3, .L17
 341 0042 0122     		movs	r2, #1
 342 0044 9A60     		str	r2, [r3, #8]
 184:Src/main.c    **** 
 343              		.loc 1 184 1 view .LVU89
 344 0046 13B0     		add	sp, sp, #76
 345              		@ sp needed
 346 0048 00BD     		pop	{pc}
 347              	.L15:
 170:Src/main.c    ****     }
 348              		.loc 1 170 9 is_stmt 1 view .LVU90
 349 004a FFF7FEFF 		bl	Error_Handler
 350              	.LVL13:
 351              	.L16:
 180:Src/main.c    ****     }
 352              		.loc 1 180 9 view .LVU91
 353 004e FFF7FEFF 		bl	Error_Handler
 354              	.LVL14:
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 28


 355              	.L18:
 356 0052 C046     		.align	2
 357              	.L17:
 358 0054 00580140 		.word	1073829888
 359              		.cfi_endproc
 360              	.LFE46:
 362              		.section	.text.main,"ax",%progbits
 363              		.align	1
 364              		.global	main
 365              		.syntax unified
 366              		.code	16
 367              		.thumb_func
 369              	main:
 370              	.LFB45:
  71:Src/main.c    ****     /* STM32F0xx HAL library initialization:
 371              		.loc 1 71 1 view -0
 372              		.cfi_startproc
 373              		@ Volatile: function does not return.
 374              		@ args = 0, pretend = 0, frame = 72
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 377              	.LCFI5:
 378              		.cfi_def_cfa_offset 20
 379              		.cfi_offset 4, -20
 380              		.cfi_offset 5, -16
 381              		.cfi_offset 6, -12
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 93B0     		sub	sp, sp, #76
 385              	.LCFI6:
 386              		.cfi_def_cfa_offset 96
  81:Src/main.c    **** 
 387              		.loc 1 81 5 view .LVU93
 388 0004 FFF7FEFF 		bl	HAL_Init
 389              	.LVL15:
  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 390              		.loc 1 83 5 view .LVU94
 391              	.LBB14:
  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 392              		.loc 1 83 5 view .LVU95
  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 393              		.loc 1 83 5 view .LVU96
 394 0008 3A4B     		ldr	r3, .L23
 395 000a 5A69     		ldr	r2, [r3, #20]
 396 000c 8021     		movs	r1, #128
 397 000e 8902     		lsls	r1, r1, #10
 398 0010 0A43     		orrs	r2, r1
 399 0012 5A61     		str	r2, [r3, #20]
  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 400              		.loc 1 83 5 view .LVU97
 401 0014 5A69     		ldr	r2, [r3, #20]
 402 0016 0A40     		ands	r2, r1
 403 0018 0192     		str	r2, [sp, #4]
  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 404              		.loc 1 83 5 view .LVU98
 405 001a 019A     		ldr	r2, [sp, #4]
 406              	.LBE14:
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 29


  83:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 407              		.loc 1 83 5 view .LVU99
  84:Src/main.c    **** 
 408              		.loc 1 84 5 view .LVU100
 409              	.LBB15:
  84:Src/main.c    **** 
 410              		.loc 1 84 5 view .LVU101
  84:Src/main.c    **** 
 411              		.loc 1 84 5 view .LVU102
 412 001c 5A69     		ldr	r2, [r3, #20]
 413 001e 8021     		movs	r1, #128
 414 0020 C902     		lsls	r1, r1, #11
 415 0022 0A43     		orrs	r2, r1
 416 0024 5A61     		str	r2, [r3, #20]
  84:Src/main.c    **** 
 417              		.loc 1 84 5 view .LVU103
 418 0026 5B69     		ldr	r3, [r3, #20]
 419 0028 0B40     		ands	r3, r1
 420 002a 0293     		str	r3, [sp, #8]
  84:Src/main.c    **** 
 421              		.loc 1 84 5 view .LVU104
 422 002c 029B     		ldr	r3, [sp, #8]
 423              	.LBE15:
  84:Src/main.c    **** 
 424              		.loc 1 84 5 view .LVU105
  87:Src/main.c    ****     My_LED_Init(LED4);
 425              		.loc 1 87 5 view .LVU106
 426 002e 0020     		movs	r0, #0
 427 0030 FFF7FEFF 		bl	My_LED_Init
 428              	.LVL16:
  88:Src/main.c    ****     My_LED_Init(LED5);
 429              		.loc 1 88 5 view .LVU107
 430 0034 0120     		movs	r0, #1
 431 0036 FFF7FEFF 		bl	My_LED_Init
 432              	.LVL17:
  89:Src/main.c    ****     My_LED_Init(LED6);
 433              		.loc 1 89 5 view .LVU108
 434 003a 0220     		movs	r0, #2
 435 003c FFF7FEFF 		bl	My_LED_Init
 436              	.LVL18:
  90:Src/main.c    **** 
 437              		.loc 1 90 5 view .LVU109
 438 0040 0320     		movs	r0, #3
 439 0042 FFF7FEFF 		bl	My_LED_Init
 440              	.LVL19:
  93:Src/main.c    ****     Setup_Timer2();
 441              		.loc 1 93 5 view .LVU110
 442 0046 FFF7FEFF 		bl	SystemClock_Config
 443              	.LVL20:
  94:Src/main.c    **** 
 444              		.loc 1 94 5 view .LVU111
 445 004a FFF7FEFF 		bl	Setup_Timer2
 446              	.LVL21:
  96:Src/main.c    **** 
 447              		.loc 1 96 5 view .LVU112
 448 004e 0320     		movs	r0, #3
 449 0050 FFF7FEFF 		bl	My_LED_On
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 30


 450              	.LVL22:
  98:Src/main.c    ****     {
 451              		.loc 1 98 5 view .LVU113
  98:Src/main.c    ****     {
 452              		.loc 1 98 22 is_stmt 0 view .LVU114
 453 0054 0DA9     		add	r1, sp, #52
 454 0056 284B     		ldr	r3, .L23+4
 455 0058 0A00     		movs	r2, r1
 456 005a 31CB     		ldmia	r3!, {r0, r4, r5}
 457 005c 31C2     		stmia	r2!, {r0, r4, r5}
 458 005e 11CB     		ldmia	r3!, {r0, r4}
 459 0060 11C2     		stmia	r2!, {r0, r4}
 106:Src/main.c    **** 
 460              		.loc 1 106 5 is_stmt 1 view .LVU115
 461 0062 9025     		movs	r5, #144
 462 0064 ED05     		lsls	r5, r5, #23
 463 0066 2800     		movs	r0, r5
 464 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 465              	.LVL23:
 108:Src/main.c    ****     {
 466              		.loc 1 108 5 view .LVU116
 108:Src/main.c    ****     {
 467              		.loc 1 108 22 is_stmt 0 view .LVU117
 468 006c 1422     		movs	r2, #20
 469 006e 0021     		movs	r1, #0
 470 0070 08A8     		add	r0, sp, #32
 471 0072 FFF7FEFF 		bl	memset
 472              	.LVL24:
 473 0076 8024     		movs	r4, #128
 474 0078 2402     		lsls	r4, r4, #8
 475 007a 0894     		str	r4, [sp, #32]
 476 007c 0127     		movs	r7, #1
 477 007e 0997     		str	r7, [sp, #36]
 478 0080 0326     		movs	r6, #3
 479 0082 0B96     		str	r6, [sp, #44]
 115:Src/main.c    ****     My_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 480              		.loc 1 115 5 is_stmt 1 view .LVU118
 481 0084 08A9     		add	r1, sp, #32
 482 0086 2800     		movs	r0, r5
 483 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 484              	.LVL25:
 116:Src/main.c    **** 
 485              		.loc 1 116 5 view .LVU119
 486 008c 0022     		movs	r2, #0
 487 008e 2100     		movs	r1, r4
 488 0090 2800     		movs	r0, r5
 489 0092 FFF7FEFF 		bl	My_GPIO_WritePin
 490              	.LVL26:
 118:Src/main.c    ****     {
 491              		.loc 1 118 5 view .LVU120
 118:Src/main.c    ****     {
 492              		.loc 1 118 22 is_stmt 0 view .LVU121
 493 0096 1422     		movs	r2, #20
 494 0098 0021     		movs	r1, #0
 495 009a 03A8     		add	r0, sp, #12
 496 009c FFF7FEFF 		bl	memset
 497              	.LVL27:
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 31


 498 00a0 0394     		str	r4, [sp, #12]
 499 00a2 0497     		str	r7, [sp, #16]
 500 00a4 0696     		str	r6, [sp, #24]
 125:Src/main.c    ****     My_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 501              		.loc 1 125 5 is_stmt 1 view .LVU122
 502 00a6 154D     		ldr	r5, .L23+8
 503 00a8 03A9     		add	r1, sp, #12
 504 00aa 2800     		movs	r0, r5
 505 00ac FFF7FEFF 		bl	HAL_GPIO_Init
 506              	.LVL28:
 126:Src/main.c    **** 
 507              		.loc 1 126 5 view .LVU123
 508 00b0 0022     		movs	r2, #0
 509 00b2 2100     		movs	r1, r4
 510 00b4 2800     		movs	r0, r5
 511 00b6 FFF7FEFF 		bl	My_GPIO_WritePin
 512              	.LVL29:
 128:Src/main.c    **** 
 513              		.loc 1 128 5 view .LVU124
 514 00ba FA20     		movs	r0, #250
 515 00bc 8000     		lsls	r0, r0, #2
 516 00be FFF7FEFF 		bl	HAL_Delay
 517              	.LVL30:
 130:Src/main.c    **** 
 518              		.loc 1 130 5 view .LVU125
 130:Src/main.c    **** 
 519              		.loc 1 130 17 is_stmt 0 view .LVU126
 520 00c2 8023     		movs	r3, #128
 521 00c4 DB05     		lsls	r3, r3, #23
 522 00c6 4022     		movs	r2, #64
 523 00c8 9A61     		str	r2, [r3, #24]
 132:Src/main.c    ****     {
 524              		.loc 1 132 5 is_stmt 1 view .LVU127
 132:Src/main.c    ****     {
 525              		.loc 1 132 18 is_stmt 0 view .LVU128
 526 00ca FFF7FEFF 		bl	DoErase
 527              	.LVL31:
 132:Src/main.c    ****     {
 528              		.loc 1 132 8 view .LVU129
 529 00ce 0028     		cmp	r0, #0
 530 00d0 0CD0     		beq	.L20
 531              	.L21:
 134:Src/main.c    ****       {
 532              		.loc 1 134 7 is_stmt 1 discriminator 1 view .LVU130
 136:Src/main.c    ****         Delay(200);
 533              		.loc 1 136 9 discriminator 1 view .LVU131
 534 00d2 0020     		movs	r0, #0
 535 00d4 FFF7FEFF 		bl	My_LED_Off
 536              	.LVL32:
 137:Src/main.c    ****         My_LED_On(LED_RED);
 537              		.loc 1 137 9 discriminator 1 view .LVU132
 538 00d8 C820     		movs	r0, #200
 539 00da FFF7FEFF 		bl	Delay
 540              	.LVL33:
 138:Src/main.c    ****         Delay(200);
 541              		.loc 1 138 9 discriminator 1 view .LVU133
 542 00de 0020     		movs	r0, #0
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 32


 543 00e0 FFF7FEFF 		bl	My_LED_On
 544              	.LVL34:
 139:Src/main.c    ****       }
 545              		.loc 1 139 9 discriminator 1 view .LVU134
 546 00e4 C820     		movs	r0, #200
 547 00e6 FFF7FEFF 		bl	Delay
 548              	.LVL35:
 134:Src/main.c    ****       {
 549              		.loc 1 134 13 discriminator 1 view .LVU135
 550 00ea F2E7     		b	.L21
 551              	.L20:
 144:Src/main.c    **** 
 552              		.loc 1 144 2 view .LVU136
 553 00ec 0020     		movs	r0, #0
 554 00ee FFF7FEFF 		bl	My_LED_On
 555              	.LVL36:
 556              	.L22:
 147:Src/main.c    ****     {
 557              		.loc 1 147 5 discriminator 1 view .LVU137
 149:Src/main.c    **** }
 558              		.loc 1 149 5 discriminator 1 view .LVU138
 147:Src/main.c    ****     {
 559              		.loc 1 147 11 discriminator 1 view .LVU139
 560 00f2 FEE7     		b	.L22
 561              	.L24:
 562              		.align	2
 563              	.L23:
 564 00f4 00100240 		.word	1073876992
 565 00f8 00000000 		.word	.LANCHOR0
 566 00fc 00040048 		.word	1207960576
 567              		.cfi_endproc
 568              	.LFE45:
 570              		.section	.rodata
 571              		.align	2
 572              		.set	.LANCHOR0,. + 0
 573              	.LC0:
 574 0000 20000000 		.word	32
 575 0004 02000000 		.word	2
 576 0008 00000000 		.word	0
 577 000c 03000000 		.word	3
 578 0010 02000000 		.word	2
 579              		.text
 580              	.Letext0:
 581              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 582              		.file 6 "c:\\arm-gnu-toolchain-12.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\\mac
 583              		.file 7 "c:\\arm-gnu-toolchain-12.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\\sys
 584              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 585              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 586              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 587              		.file 11 "Inc/flash.h"
 588              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 589              		.file 13 "Inc/timers.h"
 590              		.file 14 "Inc/my_gpio.h"
 591              		.file 15 "<built-in>"
ARM GAS  C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s 			page 33


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:19     .RamFunc:00000000 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:24     .RamFunc:00000000 My_LED_On
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:58     .RamFunc:00000018 $d
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:63     .RamFunc:00000020 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:68     .RamFunc:00000020 My_LED_Off
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:101    .RamFunc:00000038 $d
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:108    .text.Setup_Timer2:00000000 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:113    .text.Setup_Timer2:00000000 Setup_Timer2
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:216    .text.Setup_Timer2:00000050 $d
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:223    .text.Error_Handler:00000000 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:229    .text.Error_Handler:00000000 Error_Handler
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:261    .text.SystemClock_Config:00000000 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:267    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:358    .text.SystemClock_Config:00000054 $d
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:363    .text.main:00000000 $t
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:369    .text.main:00000000 main
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:564    .text.main:000000f4 $d
C:\Users\kurt\AppData\Local\Temp\ccWIZC2j.s:571    .rodata:00000000 $d

UNDEFINED SYMBOLS
My_GPIO_WritePin
My_LED_PIN
My_LED_PORT
__aeabi_uidiv
HAL_RCC_GetSysClockFreq
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
My_LED_Init
HAL_GPIO_Init
memset
HAL_Delay
DoErase
Delay
