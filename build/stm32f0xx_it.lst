ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f0xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/stm32f0xx_it.c"
  18              		.section	.RamFunc,"ax",%progbits
  19              		.align	1
  20              		.global	NMI_Handler
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	NMI_Handler:
  26              	.LFB45:
   1:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f0xx_it.c **** /**
   3:Src/stm32f0xx_it.c ****   ******************************************************************************
   4:Src/stm32f0xx_it.c ****   * @file    stm32f0xx_it.c
   5:Src/stm32f0xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f0xx_it.c ****   ******************************************************************************
   7:Src/stm32f0xx_it.c ****   * @attention
   8:Src/stm32f0xx_it.c ****   *
   9:Src/stm32f0xx_it.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Src/stm32f0xx_it.c ****   * All rights reserved.
  11:Src/stm32f0xx_it.c ****   *
  12:Src/stm32f0xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/stm32f0xx_it.c ****   * in the root directory of this software component.
  14:Src/stm32f0xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/stm32f0xx_it.c ****   *
  16:Src/stm32f0xx_it.c ****   ******************************************************************************
  17:Src/stm32f0xx_it.c ****   */
  18:Src/stm32f0xx_it.c **** /* USER CODE END Header */
  19:Src/stm32f0xx_it.c **** 
  20:Src/stm32f0xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Src/stm32f0xx_it.c **** #include "main.h"
  22:Src/stm32f0xx_it.c **** #include "stm32f0xx_it.h"
  23:Src/stm32f0xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Src/stm32f0xx_it.c **** /* USER CODE BEGIN Includes */
  25:Src/stm32f0xx_it.c **** #include "led.h"
  26:Src/stm32f0xx_it.c **** #include "timers.h"
  27:Src/stm32f0xx_it.c **** /* USER CODE END Includes */
  28:Src/stm32f0xx_it.c **** 
  29:Src/stm32f0xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Src/stm32f0xx_it.c **** /* USER CODE BEGIN TD */
  31:Src/stm32f0xx_it.c **** 
  32:Src/stm32f0xx_it.c **** /* USER CODE END TD */
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 2


  33:Src/stm32f0xx_it.c **** 
  34:Src/stm32f0xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PD */
  36:Src/stm32f0xx_it.c **** 
  37:Src/stm32f0xx_it.c **** /* USER CODE END PD */
  38:Src/stm32f0xx_it.c **** 
  39:Src/stm32f0xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PM */
  41:Src/stm32f0xx_it.c **** 
  42:Src/stm32f0xx_it.c **** /* USER CODE END PM */
  43:Src/stm32f0xx_it.c **** 
  44:Src/stm32f0xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PV */
  46:Src/stm32f0xx_it.c **** 
  47:Src/stm32f0xx_it.c **** /* USER CODE END PV */
  48:Src/stm32f0xx_it.c **** 
  49:Src/stm32f0xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Src/stm32f0xx_it.c **** /* USER CODE BEGIN PFP */
  51:Src/stm32f0xx_it.c **** 
  52:Src/stm32f0xx_it.c **** /* USER CODE END PFP */
  53:Src/stm32f0xx_it.c **** 
  54:Src/stm32f0xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 0 */
  56:Src/stm32f0xx_it.c **** 
  57:Src/stm32f0xx_it.c **** /* USER CODE END 0 */
  58:Src/stm32f0xx_it.c **** 
  59:Src/stm32f0xx_it.c **** /* External variables --------------------------------------------------------*/
  60:Src/stm32f0xx_it.c **** 
  61:Src/stm32f0xx_it.c **** /* USER CODE BEGIN EV */
  62:Src/stm32f0xx_it.c **** 
  63:Src/stm32f0xx_it.c **** /* USER CODE END EV */
  64:Src/stm32f0xx_it.c **** 
  65:Src/stm32f0xx_it.c **** /******************************************************************************/
  66:Src/stm32f0xx_it.c **** /*           Cortex-M0 Processor Interruption and Exception Handlers          */
  67:Src/stm32f0xx_it.c **** /******************************************************************************/
  68:Src/stm32f0xx_it.c **** /**
  69:Src/stm32f0xx_it.c ****   * @brief This function handles Non maskable interrupt.
  70:Src/stm32f0xx_it.c ****   */
  71:Src/stm32f0xx_it.c **** void RAMFUNC NMI_Handler(void)
  72:Src/stm32f0xx_it.c **** {
  27              		.loc 1 72 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  73:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  74:Src/stm32f0xx_it.c **** 
  75:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  76:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  77:Src/stm32f0xx_it.c ****   while (1)
  34              		.loc 1 77 3 discriminator 1 view .LVU1
  78:Src/stm32f0xx_it.c ****   {
  79:Src/stm32f0xx_it.c ****   }
  35              		.loc 1 79 3 discriminator 1 view .LVU2
  77:Src/stm32f0xx_it.c ****   {
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 3


  36              		.loc 1 77 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE45:
  41              		.align	1
  42              		.global	HardFault_Handler
  43              		.syntax unified
  44              		.code	16
  45              		.thumb_func
  47              	HardFault_Handler:
  48              	.LFB46:
  80:Src/stm32f0xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  81:Src/stm32f0xx_it.c **** }
  82:Src/stm32f0xx_it.c **** 
  83:Src/stm32f0xx_it.c **** /**
  84:Src/stm32f0xx_it.c ****   * @brief This function handles Hard fault interrupt.
  85:Src/stm32f0xx_it.c ****   */
  86:Src/stm32f0xx_it.c **** void RAMFUNC HardFault_Handler(void)
  87:Src/stm32f0xx_it.c **** {
  49              		.loc 1 87 1 view -0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
  88:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  89:Src/stm32f0xx_it.c **** 
  90:Src/stm32f0xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  91:Src/stm32f0xx_it.c ****   while (1)
  56              		.loc 1 91 3 discriminator 1 view .LVU5
  92:Src/stm32f0xx_it.c ****   {
  93:Src/stm32f0xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  94:Src/stm32f0xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  95:Src/stm32f0xx_it.c ****   }
  57              		.loc 1 95 3 discriminator 1 view .LVU6
  91:Src/stm32f0xx_it.c ****   {
  58              		.loc 1 91 9 discriminator 1 view .LVU7
  59 0002 FEE7     		b	.L4
  60              		.cfi_endproc
  61              	.LFE46:
  63              		.align	1
  64              		.global	SVC_Handler
  65              		.syntax unified
  66              		.code	16
  67              		.thumb_func
  69              	SVC_Handler:
  70              	.LFB47:
  96:Src/stm32f0xx_it.c **** }
  97:Src/stm32f0xx_it.c **** 
  98:Src/stm32f0xx_it.c **** /**
  99:Src/stm32f0xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 100:Src/stm32f0xx_it.c ****   */
 101:Src/stm32f0xx_it.c **** void RAMFUNC SVC_Handler(void)
 102:Src/stm32f0xx_it.c **** {
  71              		.loc 1 102 1 view -0
  72              		.cfi_startproc
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 4


  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
 103:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 0 */
 104:Src/stm32f0xx_it.c **** 
 105:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 0 */
 106:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SVC_IRQn 1 */
 107:Src/stm32f0xx_it.c **** 
 108:Src/stm32f0xx_it.c ****   /* USER CODE END SVC_IRQn 1 */
 109:Src/stm32f0xx_it.c **** }
  76              		.loc 1 109 1 view .LVU9
  77              		@ sp needed
  78 0004 7047     		bx	lr
  79              		.cfi_endproc
  80              	.LFE47:
  82              		.align	1
  83              		.global	PendSV_Handler
  84              		.syntax unified
  85              		.code	16
  86              		.thumb_func
  88              	PendSV_Handler:
  89              	.LFB48:
 110:Src/stm32f0xx_it.c **** 
 111:Src/stm32f0xx_it.c **** /**
 112:Src/stm32f0xx_it.c ****   * @brief This function handles Pendable request for system service.
 113:Src/stm32f0xx_it.c ****   */
 114:Src/stm32f0xx_it.c **** void RAMFUNC PendSV_Handler(void)
 115:Src/stm32f0xx_it.c **** {
  90              		.loc 1 115 1 view -0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 116:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 117:Src/stm32f0xx_it.c **** 
 118:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 119:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 120:Src/stm32f0xx_it.c **** 
 121:Src/stm32f0xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 122:Src/stm32f0xx_it.c **** }
  95              		.loc 1 122 1 view .LVU11
  96              		@ sp needed
  97 0006 7047     		bx	lr
  98              		.cfi_endproc
  99              	.LFE48:
 101              		.align	1
 102              		.global	SysTick_Handler
 103              		.syntax unified
 104              		.code	16
 105              		.thumb_func
 107              	SysTick_Handler:
 108              	.LFB49:
 123:Src/stm32f0xx_it.c **** 
 124:Src/stm32f0xx_it.c **** /**
 125:Src/stm32f0xx_it.c ****   * @brief This function handles System tick timer.
 126:Src/stm32f0xx_it.c ****   */
 127:Src/stm32f0xx_it.c **** RAMFUNC void SysTick_Handler(void)
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 5


 128:Src/stm32f0xx_it.c **** {
 109              		.loc 1 128 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113 0008 10B5     		push	{r4, lr}
 114              	.LCFI0:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 4, -8
 117              		.cfi_offset 14, -4
 129:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 130:Src/stm32f0xx_it.c ****     IncTick();
 118              		.loc 1 130 5 view .LVU13
 119              	.LBB8:
 120              	.LBI8:
 121              		.file 2 "Inc/timers.h"
   1:Inc/timers.h  **** #pragma once
   2:Inc/timers.h  **** 
   3:Inc/timers.h  **** #include "main.h"
   4:Inc/timers.h  **** 
   5:Inc/timers.h  **** extern volatile uint32_t uwTick;
   6:Inc/timers.h  **** extern volatile int enable_counter;
   7:Inc/timers.h  **** extern volatile unsigned tickcounter;
   8:Inc/timers.h  **** extern volatile uint32_t tick2;
   9:Inc/timers.h  **** 
  10:Inc/timers.h  **** static inline RAMFUNC uint32_t GetTick(void)
  11:Inc/timers.h  **** {
  12:Inc/timers.h  ****     return uwTick;
  13:Inc/timers.h  **** }
  14:Inc/timers.h  **** 
  15:Inc/timers.h  **** static inline RAMFUNC void IncTick(void)
 122              		.loc 2 15 28 view .LVU14
 123              	.LBB9:
  16:Inc/timers.h  **** {
  17:Inc/timers.h  ****     uwTick += uwTickFreq;
 124              		.loc 2 17 5 view .LVU15
 125              		.loc 2 17 12 is_stmt 0 view .LVU16
 126 000a 0B4A     		ldr	r2, .L10
 127 000c 1168     		ldr	r1, [r2]
 128 000e 0B4B     		ldr	r3, .L10+4
 129 0010 1B78     		ldrb	r3, [r3]
 130 0012 5B18     		adds	r3, r3, r1
 131 0014 1360     		str	r3, [r2]
 132              	.LBE9:
 133              	.LBE8:
 131:Src/stm32f0xx_it.c **** 
 132:Src/stm32f0xx_it.c ****     if (enable_counter) // && uwTick % 10 == 0)
 134              		.loc 1 132 5 is_stmt 1 view .LVU17
 135              		.loc 1 132 9 is_stmt 0 view .LVU18
 136 0016 0A4B     		ldr	r3, .L10+8
 137 0018 1B68     		ldr	r3, [r3]
 138              		.loc 1 132 8 view .LVU19
 139 001a 002B     		cmp	r3, #0
 140 001c 00D1     		bne	.L9
 141              	.L7:
 133:Src/stm32f0xx_it.c ****     {
 134:Src/stm32f0xx_it.c ****     	tickcounter++;
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 6


 135:Src/stm32f0xx_it.c ****     	My_LED_Toggle(LED5);
 136:Src/stm32f0xx_it.c ****     }
 137:Src/stm32f0xx_it.c **** 
 138:Src/stm32f0xx_it.c **** 
 139:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 140:Src/stm32f0xx_it.c ****   // HAL_IncTick();
 141:Src/stm32f0xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 142:Src/stm32f0xx_it.c **** 
 143:Src/stm32f0xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 144:Src/stm32f0xx_it.c **** }
 142              		.loc 1 144 1 view .LVU20
 143              		@ sp needed
 144 001e 10BD     		pop	{r4, pc}
 145              	.L9:
 134:Src/stm32f0xx_it.c ****     	My_LED_Toggle(LED5);
 146              		.loc 1 134 6 is_stmt 1 view .LVU21
 134:Src/stm32f0xx_it.c ****     	My_LED_Toggle(LED5);
 147              		.loc 1 134 17 is_stmt 0 view .LVU22
 148 0020 084A     		ldr	r2, .L10+12
 149 0022 1368     		ldr	r3, [r2]
 150 0024 0133     		adds	r3, r3, #1
 151 0026 1360     		str	r3, [r2]
 135:Src/stm32f0xx_it.c ****     }
 152              		.loc 1 135 6 is_stmt 1 view .LVU23
 153              	.LVL0:
 154              	.LBB10:
 155              	.LBI10:
 156              		.file 3 "Inc/led.h"
   1:Inc/led.h     **** #pragma once
   2:Inc/led.h     **** 
   3:Inc/led.h     **** #include "main.h"
   4:Inc/led.h     **** #include "my_gpio.h"
   5:Inc/led.h     **** 
   6:Inc/led.h     **** #define LEDn 4
   7:Inc/led.h     **** 
   8:Inc/led.h     **** #define LED3_PIN                         GPIO_PIN_6
   9:Inc/led.h     **** #define LED3_GPIO_PORT                   GPIOC
  10:Inc/led.h     **** #define LED3_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  11:Inc/led.h     **** #define LED3_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  12:Inc/led.h     **** 
  13:Inc/led.h     **** #define LED4_PIN                         GPIO_PIN_8
  14:Inc/led.h     **** #define LED4_GPIO_PORT                   GPIOC
  15:Inc/led.h     **** #define LED4_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  16:Inc/led.h     **** #define LED4_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  17:Inc/led.h     ****   
  18:Inc/led.h     **** #define LED5_PIN                         GPIO_PIN_9
  19:Inc/led.h     **** #define LED5_GPIO_PORT                   GPIOC
  20:Inc/led.h     **** #define LED5_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  21:Inc/led.h     **** #define LED5_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE()  
  22:Inc/led.h     **** 
  23:Inc/led.h     **** #define LED6_PIN                         GPIO_PIN_7
  24:Inc/led.h     **** #define LED6_GPIO_PORT                   GPIOC
  25:Inc/led.h     **** #define LED6_GPIO_CLK_ENABLE()           __HAL_RCC_GPIOC_CLK_ENABLE()  
  26:Inc/led.h     **** #define LED6_GPIO_CLK_DISABLE()          __HAL_RCC_GPIOC_CLK_DISABLE() 
  27:Inc/led.h     **** 
  28:Inc/led.h     **** #define LEDx_GPIO_CLK_ENABLE(__LED__) do { if((__LED__) == LED3) LED3_GPIO_CLK_ENABLE(); else \
  29:Inc/led.h     ****                                            if((__LED__) == LED4) LED4_GPIO_CLK_ENABLE(); else \
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 7


  30:Inc/led.h     ****                                            if((__LED__) == LED5) LED5_GPIO_CLK_ENABLE(); else \
  31:Inc/led.h     ****                                            if((__LED__) == LED6) LED6_GPIO_CLK_ENABLE();} while(0)
  32:Inc/led.h     **** 
  33:Inc/led.h     **** #define LEDx_GPIO_CLK_DISABLE(__LED__)  (((__LED__) == LED3) ? LED3_GPIO_CLK_DISABLE() :\
  34:Inc/led.h     ****                                          ((__LED__) == LED4) ? LED4_GPIO_CLK_DISABLE() :\
  35:Inc/led.h     ****                                          ((__LED__) == LED5) ? LED5_GPIO_CLK_DISABLE() : \
  36:Inc/led.h     ****                                          ((__LED__) == LED6) ? LED6_GPIO_CLK_DISABLE() : 0 )
  37:Inc/led.h     **** typedef enum 
  38:Inc/led.h     **** {
  39:Inc/led.h     ****     LED3 = 0,
  40:Inc/led.h     ****     LED4 = 1,
  41:Inc/led.h     ****     LED5 = 2,
  42:Inc/led.h     ****     LED6 = 3,
  43:Inc/led.h     ****     /* Color led aliases */
  44:Inc/led.h     ****     LED_RED    = LED3,
  45:Inc/led.h     ****     LED_ORANGE = LED4,
  46:Inc/led.h     ****     LED_GREEN  = LED5,
  47:Inc/led.h     ****     LED_BLUE   = LED6
  48:Inc/led.h     **** } Led_TypeDef;
  49:Inc/led.h     **** 
  50:Inc/led.h     **** extern GPIO_TypeDef* My_LED_PORT[LEDn];
  51:Inc/led.h     **** extern const uint16_t My_LED_PIN[LEDn];
  52:Inc/led.h     **** 
  53:Inc/led.h     **** static inline void RAMFUNC My_LED_On(Led_TypeDef Led)
  54:Inc/led.h     **** {
  55:Inc/led.h     ****   My_GPIO_WritePin(My_LED_PORT[Led], My_LED_PIN[Led], GPIO_PIN_SET);
  56:Inc/led.h     **** }
  57:Inc/led.h     **** 
  58:Inc/led.h     **** 
  59:Inc/led.h     **** static inline void RAMFUNC My_LED_Off(Led_TypeDef Led)
  60:Inc/led.h     **** {
  61:Inc/led.h     ****   My_GPIO_WritePin(My_LED_PORT[Led], My_LED_PIN[Led], GPIO_PIN_RESET);
  62:Inc/led.h     **** }
  63:Inc/led.h     **** 
  64:Inc/led.h     **** static inline void RAMFUNC My_LED_Toggle(Led_TypeDef Led)
 157              		.loc 3 64 28 view .LVU24
 158              	.LBB11:
  65:Inc/led.h     **** {
  66:Inc/led.h     ****   My_GPIO_TogglePin(My_LED_PORT[Led], My_LED_PIN[Led]);
 159              		.loc 3 66 3 view .LVU25
 160              		.loc 3 66 49 is_stmt 0 view .LVU26
 161 0028 074B     		ldr	r3, .L10+16
 162 002a 9988     		ldrh	r1, [r3, #4]
 163              		.loc 3 66 3 view .LVU27
 164 002c 074B     		ldr	r3, .L10+20
 165 002e 9868     		ldr	r0, [r3, #8]
 166 0030 FFF7FEFF 		bl	My_GPIO_TogglePin
 167              	.LVL1:
 168              		.loc 3 66 3 view .LVU28
 169              	.LBE11:
 170              	.LBE10:
 171              		.loc 1 144 1 view .LVU29
 172 0034 F3E7     		b	.L7
 173              	.L11:
 174 0036 C046     		.align	2
 175              	.L10:
 176 0038 00000000 		.word	uwTick
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 8


 177 003c 00000000 		.word	uwTickFreq
 178 0040 00000000 		.word	enable_counter
 179 0044 00000000 		.word	tickcounter
 180 0048 00000000 		.word	My_LED_PIN
 181 004c 00000000 		.word	My_LED_PORT
 182              		.cfi_endproc
 183              	.LFE49:
 185              		.align	1
 186              		.global	DefaultHandler
 187              		.syntax unified
 188              		.code	16
 189              		.thumb_func
 191              	DefaultHandler:
 192              	.LFB50:
 145:Src/stm32f0xx_it.c **** 
 146:Src/stm32f0xx_it.c **** /******************************************************************************/
 147:Src/stm32f0xx_it.c **** /* STM32F0xx Peripheral Interrupt Handlers                                    */
 148:Src/stm32f0xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 149:Src/stm32f0xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 150:Src/stm32f0xx_it.c **** /* please refer to the startup file (startup_stm32f0xx.s).                    */
 151:Src/stm32f0xx_it.c **** /******************************************************************************/
 152:Src/stm32f0xx_it.c **** 
 153:Src/stm32f0xx_it.c **** /* USER CODE BEGIN 1 */
 154:Src/stm32f0xx_it.c **** 
 155:Src/stm32f0xx_it.c **** void RAMFUNC DefaultHandler(void)
 156:Src/stm32f0xx_it.c **** {
 193              		.loc 1 156 1 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ Volatile: function does not return.
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 199              	.L13:
 157:Src/stm32f0xx_it.c **** 	while(1);
 200              		.loc 1 157 2 discriminator 1 view .LVU31
 201              		.loc 1 157 7 discriminator 1 view .LVU32
 202 0050 FEE7     		b	.L13
 203              		.cfi_endproc
 204              	.LFE50:
 206              		.align	1
 207              		.global	TIM2_IRQHandler
 208              		.syntax unified
 209              		.code	16
 210              		.thumb_func
 212              	TIM2_IRQHandler:
 213              	.LFB51:
 158:Src/stm32f0xx_it.c **** }
 159:Src/stm32f0xx_it.c **** 
 160:Src/stm32f0xx_it.c **** void RAMFUNC TIM2_IRQHandler(void)
 161:Src/stm32f0xx_it.c **** {
 214              		.loc 1 161 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0052 10B5     		push	{r4, lr}
 219              	.LCFI1:
 220              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 9


 221              		.cfi_offset 4, -8
 222              		.cfi_offset 14, -4
 162:Src/stm32f0xx_it.c **** 	TIM2->SR &= ~TIM_SR_UIF;
 223              		.loc 1 162 2 view .LVU34
 224              		.loc 1 162 6 is_stmt 0 view .LVU35
 225 0054 8024     		movs	r4, #128
 226 0056 E405     		lsls	r4, r4, #23
 227 0058 2369     		ldr	r3, [r4, #16]
 228              		.loc 1 162 11 view .LVU36
 229 005a 0122     		movs	r2, #1
 230 005c 9343     		bics	r3, r2
 231 005e 2361     		str	r3, [r4, #16]
 163:Src/stm32f0xx_it.c **** 
 164:Src/stm32f0xx_it.c **** 	tick2++;
 232              		.loc 1 164 2 is_stmt 1 view .LVU37
 233              		.loc 1 164 7 is_stmt 0 view .LVU38
 234 0060 074A     		ldr	r2, .L15
 235 0062 1368     		ldr	r3, [r2]
 236 0064 0133     		adds	r3, r3, #1
 237 0066 1360     		str	r3, [r2]
 165:Src/stm32f0xx_it.c **** 	My_LED_Toggle(LED4);
 238              		.loc 1 165 2 is_stmt 1 view .LVU39
 239              	.LVL2:
 240              	.LBB12:
 241              	.LBI12:
  64:Inc/led.h     **** {
 242              		.loc 3 64 28 view .LVU40
 243              	.LBB13:
 244              		.loc 3 66 3 view .LVU41
 245              		.loc 3 66 49 is_stmt 0 view .LVU42
 246 0068 064B     		ldr	r3, .L15+4
 247 006a 5988     		ldrh	r1, [r3, #2]
 248              		.loc 3 66 3 view .LVU43
 249 006c 064B     		ldr	r3, .L15+8
 250 006e 5868     		ldr	r0, [r3, #4]
 251 0070 FFF7FEFF 		bl	My_GPIO_TogglePin
 252              	.LVL3:
 253              		.loc 3 66 3 view .LVU44
 254              	.LBE13:
 255              	.LBE12:
 166:Src/stm32f0xx_it.c **** 
 167:Src/stm32f0xx_it.c **** 	TIM2->CCMR1 ^= (1U << TIM_CCMR1_OC1M_Pos);
 256              		.loc 1 167 2 is_stmt 1 view .LVU45
 257              		.loc 1 167 6 is_stmt 0 view .LVU46
 258 0074 A369     		ldr	r3, [r4, #24]
 259              		.loc 1 167 14 view .LVU47
 260 0076 1022     		movs	r2, #16
 261 0078 5340     		eors	r3, r2
 262 007a A361     		str	r3, [r4, #24]
 168:Src/stm32f0xx_it.c **** }
 263              		.loc 1 168 1 view .LVU48
 264              		@ sp needed
 265 007c 10BD     		pop	{r4, pc}
 266              	.L16:
 267 007e C046     		.align	2
 268              	.L15:
 269 0080 00000000 		.word	tick2
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 10


 270 0084 00000000 		.word	My_LED_PIN
 271 0088 00000000 		.word	My_LED_PORT
 272              		.cfi_endproc
 273              	.LFE51:
 275              		.text
 276              	.Letext0:
 277              		.file 4 "c:\\arm-gnu-toolchain-12.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\\mac
 278              		.file 5 "c:\\arm-gnu-toolchain-12.3.rel1-mingw-w64-i686-arm-none-eabi\\arm-none-eabi\\include\\sys
 279              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 280              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 281              		.file 8 "Inc/my_gpio.h"
ARM GAS  C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_it.c
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:19     .RamFunc:00000000 $t
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:25     .RamFunc:00000000 NMI_Handler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:47     .RamFunc:00000002 HardFault_Handler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:69     .RamFunc:00000004 SVC_Handler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:88     .RamFunc:00000006 PendSV_Handler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:107    .RamFunc:00000008 SysTick_Handler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:176    .RamFunc:00000038 $d
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:185    .RamFunc:00000050 $t
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:191    .RamFunc:00000050 DefaultHandler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:212    .RamFunc:00000052 TIM2_IRQHandler
C:\Users\kurt\AppData\Local\Temp\cceyZoCv.s:269    .RamFunc:00000080 $d

UNDEFINED SYMBOLS
My_GPIO_TogglePin
uwTick
uwTickFreq
enable_counter
tickcounter
My_LED_PIN
My_LED_PORT
tick2
